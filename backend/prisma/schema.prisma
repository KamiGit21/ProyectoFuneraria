generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  Int                   @id @default(autoincrement())
  nombre_usuario      String                @unique @db.VarChar(32)
  email               String                @unique @db.VarChar(120)
  password_hash       String
  rol                 Rol
  estado              Estado                @default(ACTIVO)
  creado_en           DateTime              @default(now())
  actualizado_en      DateTime              @default(now())

  // perfiles
  perfilCliente       PerfilCliente?
  perfilOperador      PerfilOperador?
  perfilAdmin         PerfilAdmin?

  // órdenes
  ordenesCliente      Orden[]               @relation("ClienteOrden")
  ordenesOperador     Orden[]               @relation("OperadorOrden")

  // pagos
  pagos               Pago[]                @relation("UsuarioPagos")

  // condolencias HECHAS POR este usuario
  obituariosAutor     Condolencia[]         @relation("AutorCondolencia")

  // notificaciones
  notificaciones      Notificacion[]

  // importaciones
  importaciones       ImportacionCsv[]

  // auditorías
  auditorias          Auditoria[]

  // evaluaciones
  evaluaciones        Evaluacion[]

  // personalizaciones
  personalizaciones   Personalizacion[]

  // tokens de email
  emailVerificacion   EmailVerificacion?    @relation("UsuarioEmailVerificacion")
  passwordResets      PasswordReset[]       @relation("UsuarioPasswordResets")

  @@map("usuario")
}

model PerfilCliente {
  usuario_id Int       @id
  nombres    String    @db.VarChar(80)
  apellidos  String    @db.VarChar(80)
  telefono   String?   @db.VarChar(20)
  direccion  String?   @db.Text
  usuario    Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("perfil_cliente")
}

model PerfilOperador {
  usuario_id Int       @id
  nombres    String    @db.VarChar(80)
  ci         String    @db.VarChar(20)
  cargo      String    @db.VarChar(60)
  telefono   String?   @db.VarChar(20)
  usuario    Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("perfil_operador")
}

model PerfilAdmin {
  usuario_id      Int       @id
  nombre_completo String    @db.VarChar(160)
  usuario         Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("perfil_admin")
}

model Servicio {
  id             Int             @id @default(autoincrement())
  nombre         String          @db.VarChar(100)
  descripcion    String?         @db.Text
  precio_base    Decimal
  activo         Boolean         @default(true)
  creado_en      DateTime        @default(now())
  actualizado_en DateTime        @default(now())
  detalles       OrdenDetalle[]

  @@map("servicio")
}

model Orden {
  id             Int            @id @default(autoincrement())
  cliente_id     Int
  operador_id    Int?
  estado         OrdenEstado    @default(PENDIENTE)
  total          Decimal        @default(0)
  creado_en      DateTime       @default(now())
  actualizado_en DateTime       @default(now())

  cliente        Usuario        @relation("ClienteOrden", fields: [cliente_id], references: [id])
  operador       Usuario?       @relation("OperadorOrden", fields: [operador_id], references: [id])

  detalles       OrdenDetalle[]
  difuntos       Difunto[]
  obituarios     Obituario[]
  pagos          Pago[]

  @@map("orden")
}

model OrdenDetalle {
  id              Int      @id @default(autoincrement())
  orden_id        Int
  servicio_id     Int
  descripcion_srv String?
  precio_unitario Decimal
  cantidad        Int      @default(1)
  subtotal        Decimal

  orden           Orden    @relation(fields: [orden_id], references: [id], onDelete: Cascade)
  servicio        Servicio @relation(fields: [servicio_id], references: [id])

  @@map("orden_detalle")
}

model Difunto {
  id              Int      @id @default(autoincrement())
  orden_id        Int
  nombres         String   @db.VarChar(100)
  fecha_fallecido DateTime

  orden           Orden    @relation(fields: [orden_id], references: [id], onDelete: Cascade)

  @@map("difunto")
}

model Pago {
  id         Int         @id @default(autoincrement())
  orden_id   Int
  orden      Orden       @relation(fields: [orden_id], references: [id])
  usuario_id Int
  usuario    Usuario     @relation("UsuarioPagos", fields: [usuario_id], references: [id])
  monto      Decimal
  metodo     MetodoPago
  estado     EstadoPago
  referencia String?
  pagado_en  DateTime    @default(now())

  @@map("pago")
}

model Obituario {
  id             Int           @id @default(autoincrement())
  orden_id       Int
  titulo         String        @db.VarChar(150)
  mensaje        String        @db.Text
  url_slug       String        @unique @db.VarChar(160)
  imagen_url     String?       @db.Text
  publicado      Boolean       @default(false)
  creado_en      DateTime      @default(now())
  actualizado_en DateTime      @default(now())
  condolencias   Condolencia[]
  orden          Orden         @relation(fields: [orden_id], references: [id])

  @@map("obituario")
}

model Condolencia {
  id           Int               @id @default(autoincrement())
  obituario_id Int
  autor_id     Int
  mensaje      String            @db.Text
  imagen_url   String?           @db.Text
  estado       CondolenciaEstado @default(PENDIENTE)
  creado_en    DateTime          @default(now())

  obituario    Obituario         @relation(fields: [obituario_id], references: [id], onDelete: Cascade)
  autor        Usuario           @relation("AutorCondolencia", fields: [autor_id], references: [id])

  @@map("condolencia")
}

model Notificacion {
  id          Int      @id @default(autoincrement())
  usuario_id  Int
  asunto      String   @db.VarChar(120)
  cuerpo      String   @db.Text
  leida       Boolean  @default(false)
  enviado_en  DateTime @default(now())
  usuario     Usuario  @relation(fields: [usuario_id], references: [id])

  @@map("notificacion")
}

model ImportacionCsv {
  id              Int      @id @default(autoincrement())
  admin_id        Int
  archivo_nombre  String   @db.VarChar(180)
  total_registros Int
  exitosos        Int
  con_errores     Int
  ejecutado_en    DateTime @default(now())
  admin           Usuario  @relation(fields: [admin_id], references: [id])

  @@map("importacion_csv")
}

model Auditoria {
  id           Int       @id @default(autoincrement())
  usuario_id   Int?
  tabla        String    @db.VarChar(60)
  operacion    Operacion
  registro_id  Int
  antes        Json?
  despues      Json?
  realizado_en DateTime  @default(now())
  usuario      Usuario?  @relation(fields: [usuario_id], references: [id])

  @@map("auditoria")
}

model FAQ {
  id        Int    @id @default(autoincrement())
  pregunta  String @db.Text
  respuesta String @db.Text

  @@map("faq")
}

model RecursoAyuda {
  id        Int          @id @default(autoincrement())
  titulo    String       @db.VarChar(120)
  contenido String       @db.Text
  tipo      RecursoTipo

  @@map("recurso_ayuda")
}

model Evaluacion {
  id         Int      @id @default(autoincrement())
  cliente_id Int
  puntuacion Int      @default(1)
  comentario String?
  creado_en  DateTime @default(now())
  cliente    Usuario  @relation(fields: [cliente_id], references: [id])

  @@map("evaluacion")
}

model Personalizacion {
  id              Int      @id @default(autoincrement())
  cliente_id      Int
  detalles        String   @db.Text
  fecha_solicitud DateTime
  cliente         Usuario  @relation(fields: [cliente_id], references: [id])

  @@map("personalizacion")
}

model EmailVerificacion {
  usuario_id Int      @id
  token      String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creado_en  DateTime @default(now())
  expiracion DateTime @default(dbgenerated("now() + INTERVAL '1 day'"))
  usuario    Usuario  @relation("UsuarioEmailVerificacion", fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("email_verificacion")
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  usuario_id Int
  token      String   @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  creado_en  DateTime @default(now())
  expiracion DateTime @default(dbgenerated("now() + INTERVAL '1 hour'"))
  usuario    Usuario  @relation("UsuarioPasswordResets", fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("password_reset")
}

// Enums

enum Rol {
  CLIENTE
  OPERADOR
  ADMIN
}

enum Estado {
  ACTIVO
  INACTIVO
}

enum OrdenEstado {
  PENDIENTE
  EN_PROCESO
  FINALIZADO
  CANCELADO
}

enum MetodoPago {
  TARJETA
  TRANSFERENCIA
  EFECTIVO
  BILLETERA
}

enum EstadoPago {
  PENDIENTE
  COMPLETADO
  FALLIDO
}

enum CondolenciaEstado {
  PENDIENTE
  APROBADO
  RECHAZADO
}

enum Operacion {
  INSERT
  UPDATE
  DELETE
}

enum RecursoTipo {
  ARTICULO
  VIDEO
  AUDIO
}
